#! /usr/bin/env racket
#lang racket

(require racket/cmdline)
(require koyo/random)
(require net/sendurl)

(define open-param (make-parameter ""))
(define new-param (make-parameter ""))

(define parser
    (command-line
    #:usage-help
    "Dr.Shortener: URL Shortener Tool"
    
    #:once-any
    [("-o" "--open") SHORT-URL
                     "Input the already shortened URL by the tool"
                     (open-param SHORT-URL)]
    [("-n" "--new") LONG-URL
                    "Original, long URL from a website."
                    (new-param LONG-URL)]))

(define header "https://dr.sh/")
(define filename "dr-shortener.csv")

(define (generate-short)
    (string-append header (generate-random-string 6)))

(define (store-new-pair pair)
    (define out (open-output-file filename #:exists 'append))
    (define key (car pair))
    (define value (car (cdr pair)))
    (fprintf out "~a,~a\n" key value)
    (printf "URL has been shortened:\n~a -> ~a\n" key value)
    (close-output-port out))

(define (overwrite-pair line)
    (define in (open-input-file filename))
    (define key (car (string-split line ",")))
    (define old-value (car (cdr (string-split line ","))))
    (define new-value (generate-short))
    (define old-pair (string-append key "," old-value))
    (define new-pair (string-replace line old-value new-value))
    (let loop1
        ([loop-line (read-line in)]
        [file-list empty])
        (cond
            [(eof-object? loop-line)
                (close-input-port in)
                (define out (open-output-file filename #:exists 'truncate))
                (let loop2
                    ([data file-list])
                    (cond
                        [(empty? data)
                            (close-output-port out)
                            (printf "Short URL has been overwritten:\n~a -> ~a\n" key new-value)]
                        [(string=? old-pair (car data))
                            (fprintf out "~a\n" new-pair)
                            (loop2 (cdr data))]
                        [else
                            (fprintf out "~a\n" (car data))
                            (loop2 (cdr data))]))]
            [else (loop1 (read-line in) (append file-list (list loop-line)))])))

(define (new-url long)
    (define in (open-input-file filename))
    (let loop
        ([line (read-line in)])
        (cond
            [(eof-object? line)
                (store-new-pair (list long (generate-short)))]
            [(string=? long (car (string-split line ",")))
                (printf "URL '~a' has already been shortened.\n\t1. Overwrite existing short URL\n\t2. Add new entry\n" long)
                (define input (read))
                (cond
                    [(equal? input 1)
                        (close-input-port in)
                        (overwrite-pair line)]
                    [(equal? input 2)
                        (close-input-port in)
                        (store-new-pair (list long (generate-short)))])]
            [else (loop (read-line in))])))

(define (open-url short)
    (define in (open-input-file filename))
    (let loop
        ([line (read-line in)])
        (cond
            [(eof-object? line)
                (close-input-port in)
                (printf "Error. URL '~a' not found\n" short)]
            [(string=? short (car (cdr (string-split line ","))))
                (close-input-port in)
                (send-url (car (string-split line ",")))]
            [else (loop (read-line in))])))


(cond 
    [(non-empty-string? (open-param))
        (open-url (open-param))]
    [(non-empty-string? (new-param))
        (new-url (new-param))]
    [else (printf "Error. For usage type in -h or --help\n")])
